geom_hline(yintercept = 0, linetype = 2, col = "black")+
labs( x=  "Nature to Nature", y = "Nature to People")+
theme_minimal()+
theme(legend.position = "none")
NN_NS_plot
NN_NS_plot <- ggplot(NN_NS_with_col, aes( y= NS_PC1, x = NN_PC1) ) +
#up right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_r)==F),
size = 1.5,
aes(colour= product_u_r, alpha = product_u_r)) +
scale_colour_gradient("product_u_r",
low = "white", high="darkred",
na.value=NA) +
scale_alpha_continuous(range = c(0, 1)) +
ggnewscale::new_scale("colour") +
#up left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_l)==F),
size = 1.5,
aes(colour=product_u_l)) +
scale_colour_gradient("product_u_l",
low = "white", high="darkblue",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_r)==F),
size = 1.5,
aes(colour=product_d_r)) +
scale_colour_gradient("product_d_r",
low = "white", high="forestgreen",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_l)==F),
size = 1.5,
aes(colour= product_d_l)) +
scale_colour_gradient("product_d_l",
low = "white", high="grey20",
na.value=NA) +
scale_alpha_continuous(range = c(0, 0.1)) +
#add lines
geom_vline(xintercept = 0, linetype = 2, col = "black")+
geom_hline(yintercept = 0, linetype = 2, col = "black")+
labs( x=  "Nature to Nature", y = "Nature to People")+
theme_minimal()+
theme(legend.position = "none")
NN_NS_plot <- ggplot(NN_NS_with_col, aes( y= NS_PC1, x = NN_PC1) ) +
#up right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_r)==F),
size = 1.5,
aes(colour= product_u_r, alpha = product_u_r)) +
scale_colour_gradient("product_u_r",
low = "white", high="darkred",
na.value=NA) +
scale_alpha_continuous(range = c(0, 1)) +
ggnewscale::new_scale("colour") +
#up left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_l)==F),
size = 1.5,
aes(colour=product_u_l)) +
scale_colour_gradient("product_u_l",
low = "white", high="darkblue",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_r)==F),
size = 1.5,
aes(colour=product_d_r)) +
scale_colour_gradient("product_d_r",
low = "white", high="forestgreen",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_l)==F),
size = 1.5,
aes(colour= product_d_l)) +
scale_colour_gradient("product_d_l",
low = "white", high="grey20",
na.value=NA) +
scale_alpha_continuous(range = c(0, 1)) +
#add lines
geom_vline(xintercept = 0, linetype = 2, col = "black")+
geom_hline(yintercept = 0, linetype = 2, col = "black")+
labs( x=  "Nature to Nature", y = "Nature to People")+
theme_minimal()+
theme(legend.position = "none")
NN_NS_plot
NN_NS_plot <- ggplot(NN_NS_with_col, aes( y= NS_PC1, x = NN_PC1) ) +
#up right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_r)==F),
size = 1.5,
aes(colour= product_u_r, alpha = product_u_r)) +
scale_colour_gradient("product_u_r",
low = "white", high="darkred",
na.value=NA) +
ggnewscale::new_scale("colour") +
#up left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_l)==F),
size = 1.5,
aes(colour=product_u_l, alpha = product_u_l)) +
scale_colour_gradient("product_u_l",
low = "white", high="darkblue",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_r)==F),
size = 1.5,
aes(colour=product_d_r, alpha = product_d_r)) +
scale_colour_gradient("product_d_r",
low = "white", high="forestgreen",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_l)==F),
size = 1.5,
aes(colour= product_d_l, alpha = product_d_l)) +
scale_colour_gradient("product_d_l",
low = "white", high="grey20",
na.value=NA) +
scale_alpha_continuous(range = c(0, 1)) +
#add lines
geom_vline(xintercept = 0, linetype = 2, col = "black")+
geom_hline(yintercept = 0, linetype = 2, col = "black")+
labs( x=  "Nature to Nature", y = "Nature to People")+
theme_minimal()+
theme(legend.position = "none")
NN_NS_plot
#world coast shapefile
coast <- sf::st_read(here::here("data", "ShapeFiles coast", "GSHHS_h_L1.shp"))
#data
NN_NS_with_col <- NN_NS_with_col %>%  left_join(NCP_site[,c("SiteCode", "SiteLongitude", "SiteLatitude")])
#plot
map <- ggplot(NN_NS_with_col) +
geom_sf(data = coast, color = NA, fill = "lightgrey") +
#down left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_l)==F),
size = 2, alpha = 0.5,
aes(x = SiteLongitude, y = SiteLatitude,
colour= product_d_l, alpha = product_d_l)) +
scale_colour_gradient("product_d_l",
low = "white", high="grey20",
na.value=NA) +
ggnewscale::new_scale("colour") +
#up left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_l)==F),
size = 2, alpha = 0.5,
aes(x = SiteLongitude, y = SiteLatitude,
colour=product_u_l, alpha = product_u_l)) +
scale_colour_gradient("product_u_l",
low = "white", high="darkblue",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_r)==F),
size = 2, alpha = 0.5,
aes(x = SiteLongitude, y = SiteLatitude,
colour=product_d_r, alpha = product_d_r)) +
scale_colour_gradient("product_d_r",
low = "white", high="forestgreen",
na.value=NA) +
ggnewscale::new_scale("colour") +
#up right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_r)==F),
size = 2,
aes(x = SiteLongitude, y = SiteLatitude,
colour= product_u_r, alpha = product_u_r)) +
scale_colour_gradient("product_u_r",
low = "white", high="darkred",
na.value=NA) +
#add transparency
scale_alpha_continuous(range = c(0, 1)) +
coord_sf(ylim = c(-36, 31), expand = FALSE) +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 1))) +
scale_size_continuous(range = c(0.5, 4), guide = FALSE) +
theme_minimal()+
labs(title = "Trade-offs in Nature Based Contribution worldwide",
x="Longitude", y= "Latitude") +
theme(legend.position = "none",
plot.title = element_text(size=10, face="bold"),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
plot.margin = unit(c(0.000,0.000,0.000,0.000), units = , "cm")
)
map
ggsave( here::here("figures", "world map with NN and NS PC1.jpg"), plot = map, width=15, height = 7 )
##NS
map <- ggplot(NN_NS_with_col) +
geom_sf(data = coast, color = NA, fill = "lightgrey") +
geom_point(aes(x = SiteLongitude, y = SiteLatitude,
color = NS_PC1, alpha= NS_PC1,
size = 2)) +
scale_colour_gradientn(colours = colorRampPalette(rev(c( "forestgreen","white", "darkred")))(1000)) +
scale_alpha_continuous(range = c(0, 1)) +
coord_sf(ylim = c(-36, 31), expand = FALSE) +
scale_size_continuous(range = c(0.5, 4), guide = FALSE) +
labs(title = "Nature to People",
x="Longitude", y= "Latitude") +
theme(
plot.title = element_text(size=10, face="bold"),
)
map
##NS
map <- ggplot(NN_NS_with_col) +
geom_sf(data = coast, color = NA, fill = "lightgrey") +
geom_point(aes(x = SiteLongitude, y = SiteLatitude,
color = NS_PC1, alpha= abs(NS_PC1),
size = 2)) +
scale_colour_gradientn(colours = colorRampPalette(rev(c( "forestgreen","white", "darkred")))(1000)) +
scale_alpha_continuous(range = c(0, 1)) +
coord_sf(ylim = c(-36, 31), expand = FALSE) +
scale_size_continuous(range = c(0.5, 4), guide = FALSE) +
labs(title = "Nature to People",
x="Longitude", y= "Latitude") +
theme(
plot.title = element_text(size=10, face="bold"),
)
map
NN_NS_plot <- ggplot(NN_NS_with_col, aes( y= NS_PC1, x = NN_PC1) ) +
#up right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_r)==F),
size = 1.5,
aes(colour= product_u_r, alpha = product_u_r)) +
scale_colour_gradient("product_u_r",
low = "white", high="darkred",
na.value=NA) +
ggnewscale::new_scale("colour") +
#up left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_l)==F),
size = 1.5,
aes(colour=product_u_l, alpha = product_u_l)) +
scale_colour_gradient("product_u_l",
low = "white", high="darkblue",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_r)==F),
size = 1.5,
aes(colour=product_d_r, alpha = product_d_r)) +
scale_colour_gradient("product_d_r",
low = "white", high="forestgreen",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_l)==F),
size = 1.5,
aes(colour= product_d_l, alpha = product_d_l)) +
scale_colour_gradient("product_d_l",
low = "white", high="grey20",
na.value=NA) +
scale_alpha_continuous(range = c(0, 1)) +
#add lines
geom_vline(xintercept = 0, linetype = 2, col = "black")+
geom_hline(yintercept = 0, linetype = 2, col = "black")+
labs( x=  "Nature to Nature", y = "Nature to People")+
theme_minimal()+
theme(legend.position = "none")
NN_NS_plot
NN_NS_plot <- ggplot(NN_NS_with_col, aes( y= NS_PC1, x = NN_PC1) ) +
#up right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_r)==F),
size = 1.5,
aes(colour= product_u_r, alpha = product_u_r)) +
scale_colour_gradient("product_u_r",
low = "white", high="darkred",
na.value=NA) +
ggnewscale::new_scale("colour") +
#up left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_l)==F),
size = 1.5,
aes(colour=product_u_l, alpha = product_u_l)) +
scale_colour_gradient("product_u_l",
low = "white", high="darkblue",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_r)==F),
size = 1.5,
aes(colour=product_d_r, alpha = product_d_r)) +
scale_colour_gradient("product_d_r",
low = "white", high="forestgreen",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_l)==F),
size = 1.5,
aes(colour= product_d_l, alpha = product_d_l)) +
scale_colour_gradient("product_d_l",
low = "white", high="grey20",
na.value=NA) +
scale_alpha_continuous(range = c(0, 0.5)) +
#add lines
geom_vline(xintercept = 0, linetype = 2, col = "black")+
geom_hline(yintercept = 0, linetype = 2, col = "black")+
labs( x=  "Nature to Nature", y = "Nature to People")+
theme_minimal()+
theme(legend.position = "none")
NN_NS_plot
NN_NS_plot <- ggplot(NN_NS_with_col, aes( y= NS_PC1, x = NN_PC1) ) +
#up right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_r)==F),
size = 1.5,
aes(colour= product_u_r, alpha = product_u_r)) +
scale_colour_gradient("product_u_r",
low = "white", high="darkred",
na.value=NA) +
ggnewscale::new_scale("colour") +
#up left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_l)==F),
size = 1.5,
aes(colour=product_u_l, alpha = product_u_l)) +
scale_colour_gradient("product_u_l",
low = "white", high="darkblue",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_r)==F),
size = 1.5,
aes(colour=product_d_r, alpha = product_d_r)) +
scale_colour_gradient("product_d_r",
low = "white", high="forestgreen",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_l)==F),
size = 1.5,
aes(colour= product_d_l, alpha = product_d_l)) +
scale_colour_gradient("product_d_l",
low = "white", high="grey20",
na.value=NA) +
scale_alpha_continuous(range = c(0, 0.8)) +
#add lines
geom_vline(xintercept = 0, linetype = 2, col = "black")+
geom_hline(yintercept = 0, linetype = 2, col = "black")+
labs( x=  "Nature to Nature", y = "Nature to People")+
theme_minimal()+
theme(legend.position = "none")
NN_NS_plot
NN_NS_plot <- ggplot(NN_NS_with_col, aes( y= NS_PC1, x = NN_PC1) ) +
#up right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_r)==F),
size = 2,
aes(colour= product_u_r, alpha = product_u_r)) +
scale_colour_gradient("product_u_r",
low = "white", high="darkred",
na.value=NA) +
ggnewscale::new_scale("colour") +
#up left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_l)==F),
size = 2,
aes(colour=product_u_l, alpha = product_u_l)) +
scale_colour_gradient("product_u_l",
low = "white", high="darkblue",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_r)==F),
size = 2,
aes(colour=product_d_r, alpha = product_d_r)) +
scale_colour_gradient("product_d_r",
low = "white", high="forestgreen",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_l)==F),
size = 2,
aes(colour= product_d_l, alpha = product_d_l)) +
scale_colour_gradient("product_d_l",
low = "white", high="grey20",
na.value=NA) +
scale_alpha_continuous(range = c(0, 0.8)) +
#add lines
geom_vline(xintercept = 0, linetype = 2, col = "black")+
geom_hline(yintercept = 0, linetype = 2, col = "black")+
labs( x=  "Nature to Nature", y = "Nature to People")+
theme_minimal()+
theme(legend.position = "none")
NN_NS_plot
ggsave( here::here("figures", "Sites in NN and NS PC1.jpg"), plot = NN_NS_plot, width=20, height = 15 )
NN_NS_plot <- ggplot(NN_NS_with_col, aes( y= NS_PC1, x = NN_PC1) ) +
#up right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_r)==F),
size = 2,
aes(colour= product_u_r, alpha = product_u_r)) +
scale_colour_gradient("product_u_r",
low = "white", high="darkred",
na.value=NA) +
ggnewscale::new_scale("colour") +
#up left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_l)==F),
size = 2,
aes(colour=product_u_l, alpha = product_u_l)) +
scale_colour_gradient("product_u_l",
low = "white", high="darkblue",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_r)==F),
size = 2,
aes(colour="forestgreen", alpha = product_d_r)) +
scale_colour_gradient("product_d_r",
low = "white", high="forestgreen",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_l)==F),
size = 2,
aes(colour= product_d_l, alpha = product_d_l)) +
scale_colour_gradient("product_d_l",
low = "white", high="grey20",
na.value=NA) +
scale_alpha_continuous(range = c(0, 0.8)) +
#add lines
geom_vline(xintercept = 0, linetype = 2, col = "black")+
geom_hline(yintercept = 0, linetype = 2, col = "black")+
labs( x=  "Nature to Nature", y = "Nature to People")+
theme_minimal()+
theme(legend.position = "none")
NN_NS_plot
NN_NS_plot <- ggplot(NN_NS_with_col, aes( y= NS_PC1, x = NN_PC1) ) +
#up right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_r)==F),
size = 2,
aes(colour= product_u_r, alpha = product_u_r)) +
scale_colour_gradient("product_u_r",
low = "white", high="darkred",
na.value=NA) +
ggnewscale::new_scale("colour") +
#up left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_l)==F),
size = 2,
aes(colour=product_u_l, alpha = product_u_l)) +
scale_colour_gradient("product_u_l",
low = "white", high="darkblue",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_r)==F),
size = 2,
aes(colour="forestgreen", alpha = product_d_r)) +
ggnewscale::new_scale("colour") +
#down left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_l)==F),
size = 2,
aes(colour= product_d_l, alpha = product_d_l)) +
scale_colour_gradient("product_d_l",
low = "white", high="grey20",
na.value=NA) +
scale_alpha_continuous(range = c(0, 0.8)) +
#add lines
geom_vline(xintercept = 0, linetype = 2, col = "black")+
geom_hline(yintercept = 0, linetype = 2, col = "black")+
labs( x=  "Nature to Nature", y = "Nature to People")+
theme_minimal()+
theme(legend.position = "none")
NN_NS_plot
NN_NS_plot <- ggplot(NN_NS_with_col, aes( y= NS_PC1, x = NN_PC1) ) +
#up right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_r)==F),
size = 2,
aes(colour= product_u_r, alpha = product_u_r)) +
scale_colour_gradient("product_u_r",
low = "white", high="darkred",
na.value=NA) +
ggnewscale::new_scale("colour") +
#up left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_u_l)==F),
size = 2,
aes(colour=product_u_l, alpha = product_u_l)) +
scale_colour_gradient("product_u_l",
low = "white", high="darkblue",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down right quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_r)==F),
size = 2,
aes(colour=product_d_r, alpha = product_d_r)) +
scale_colour_gradient("product_d_r",
low = "white", high="forestgreen",
na.value=NA) +
ggnewscale::new_scale("colour") +
#down left quarter
geom_point(data= dplyr::filter(NN_NS_with_col, is.na(product_d_l)==F),
size = 2,
aes(colour= product_d_l, alpha = product_d_l)) +
scale_colour_gradient("product_d_l",
low = "white", high="grey20",
na.value=NA) +
scale_alpha_continuous(range = c(0, 0.8)) +
#add lines
geom_vline(xintercept = 0, linetype = 2, col = "black")+
geom_hline(yintercept = 0, linetype = 2, col = "black")+
labs( x=  "Nature to Nature", y = "Nature to People")+
theme_minimal()+
theme(legend.position = "none")
NN_NS_plot
ggsave( here::here("figures", "world map with NN and NS PC1.jpg"), plot = map, width=15, height = 7 )
info <- readRDS("/home/david_eme/Bureau/Chap_1_NCPs/Github_NLoiseau_predict_prodctivity/data/RLS_socio_withoutNA.rds")
View(info)
#-----------------Loading packages-------------------
pkgs <- c("here", "tidyverse","FactoMineR", "tibble", "questionr", "corrplot",
"factoextra", "ggpubr", "scico", "RColorBrewer", "plotly", "fishualize",
"ggplot2", "patchwork", "colormap", "grDevices", "ggnewscale", "sf")
nip <- pkgs[!(pkgs %in% installed.packages())]
nip <- lapply(nip, install.packages, dependencies = TRUE)
ip   <- unlist(lapply(pkgs, require, character.only = TRUE, quietly = TRUE))
#-----------------Loading packages-------------------
pkgs <- c("here", "tidyverse","FactoMineR", "tibble", "questionr", "corrplot",
"factoextra", "ggpubr", "scico", "RColorBrewer", "plotly", "fishualize",
"ggplot2", "patchwork", "colormap", "grDevices", "ggnewscale", "sf")
nip <- pkgs[!(pkgs %in% installed.packages())]
nip <- lapply(nip, install.packages, dependencies = TRUE)
ip   <- unlist(lapply(pkgs, require, character.only = TRUE, quietly = TRUE))
require(tidyverse)
