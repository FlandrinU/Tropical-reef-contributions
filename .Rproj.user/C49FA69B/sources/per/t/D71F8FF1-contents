################################################################################
###                     Carto Indicateurs Trophiques                         ###
###         by Ulysse Flandrin, modified from Camille Albouy's script        ###
###                             09/03/22                                     ###
################################################################################

### Directory
setwd("/home/david_eme/Bureau/Data stage/")

### Library
lib_vect <- c( "sf", "sp", "scico", "viridis", "GISTools", "raster", "marmap")
sapply(lib_vect,library,character.only=TRUE)

xlim=c(-10,1); ylim=c(43,51) #crop of the map only on the BoB

##### Isobaths####
bathy <- raster("/home/david_eme/Bureau/Data stage/Data pour analyses/Bathymetry/GRID_BATHY/r1.gri") 
bathy <- aggregate(crop(bathy, extent(c(xlim, ylim))),fact=10)
iso <- data.frame(cbind(coordinates(bathy)), z=values(bathy)); names(iso) <- c("x", "y", "z")
iso$z[which(is.na(iso$z))] <- 0
write.csv(iso, "/home/david_eme/Bureau/Data stage/Data pour analyses/Bathymetry/GRID_BATHY/r1_BoB.csv", row.names = F)
isobath <- read.bathy(xyz="/home/david_eme/Bureau/Data stage/Data pour analyses/Bathymetry/GRID_BATHY/r1_BoB.csv", header=T)
#
######################################### Function Rosace #####################################
# FONCTION POUR LA ROSACE DU NORD
# https://sites.google.com/site/rgraphiques/5--applications/5--realiser-des-cartes-avec-le-logiciel-r/01-bases-de-cartographie

northarrow <- function(loc, size, bearing = 0, cex = 1, dist_letter=2) {
  
  # =========================================
  
  cols <- rep(c("white", "black"), 8)
  
  # Coordonnees des polygones de la rose des vents
  
  radii <- rep(size/c(1, 4, 2, 4), 4) ;  x <- radii[(0:15) + 1] * cos((0:15) * pi/8 + bearing) + loc[1]
  
  y <- radii[(0:15) + 1] * sin((0:15) * pi/8 + bearing) + loc[2]
  
  # Trace des polygones
  
  for (i in 1:15) {
    
    x1 <- c(x[i], x[i + 1], loc[1])  ;   y1 <- c(y[i], y[i + 1], loc[2])  ;   polygon(x1, y1, col = cols[i], border="black")
    
  }
  
  # Trace du dernier polygone
  
  x1 <- c(x[16], x[1], loc[1])  ;  y1 <- c(y[16], y[1], loc[2]) ;  polygon(x1, y1, col = cols[16],border="black")
  
  # Rajout des lettres
  
  b <- c("E", "N", "O", "S")
  
  for (i in 0:3) {
    
    text((size/dist_letter + par("cxy")[1]) * cos(bearing + i * pi/2) + loc[1],
         (size/dist_letter + par("cxy")[2]) * sin(bearing + i * pi/2) + loc[2],
         b[i + 1],
         cex = cex,
         col="black")
    
  } }

######################### New function ###########################
### Data
load("Metaweb/Results/Indicateurs_trophiques_grilleICES_seuil0.8.rdata")
load("Intersection range mapping_ICES/bathy_grid_ICES.rdata")
#Mat_PA <- readRDS("Intersection range mapping_ICES/matrice_de_présence.RDS") 
Mat_PA <- readRDS("Intersection range mapping_ICES/matrice_de_présence_BoB.RDS") 


coast <- st_read("Data pour analyses/ShapeFiles coast/GSHHS_h_L1.shp")
proj <- CRS("+proj=merc +a=6378137 +b=6378137 +lat_ts=0.0 +lon_0=0.0 +x_0=0.0 +y_0=0 +k=1.0 +units=m +nadgrids=@null +no_defs") 
proj84 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs +towgs84=0,0,0") #systeme géodésique mondiale WGS84

ind_troph_df <- do.call(rbind, Res_world_list)
TI <- cbind(Mat_PA[,c(1:10)], bathymetry=mean_bathy_ices[as.numeric(rownames(Mat_PA))], ind_troph_df)

### filter
TI <- TI[-which(TI[,"Species"] <=50) , ] # removing pixels with few species (pixels on continent)
TI <- TI[-which(is.na(TI[,"bathymetry"])) , ] 

#TI_bob <- TI[which(TI$sub_x>xlim[1] & TI$sub_x<xlim[2] & TI$sub_y>ylim[1] & TI$sub_y<ylim[2]),]
TI_bob_cont <- TI[-which(TI$bathymetry>800),]
###
TI_gps <- st_transform(TI_bob_cont$geometry, proj84)
sf::sf_use_s2(FALSE) ##Spherical geometry (s2) switched off
coast <- st_crop(coast, xmin=xlim[1], xmax=xlim[2],ymin=ylim[1], ymax=ylim[2]) 



#### Fonction ####
Map_the_troph_world <- function (Data_PA =TI_bob_cont, geometry = TI_gps ,col = c("blue", "red3"),
                                 breaks= seq(0,40,2),include.lowest=TRUE, xlim = c(-180,180), ylim = c(-90,90),zlevels=21,
                                 coastline = TRUE, main_legend="Mean Trophic level", output=FALSE,names_fig="a)",cex_names_fig=1,
                                 digit=1,cex.axis.leg=0.8,cex_point=0.6,...){
  
  require(shape)
  
  layout(rbind(c(1,1,1),c(1,1,1),c(1,1,1),c(2,2,3)))
  par(mar=c(0, 3, 4,3))
  
  # jet.color <-  colorRampPalette(col)
  # colour <-  jet.color(length(breaks)-1)
  colour <- scico(length(breaks)-1, palette="romaO", begin=0, end=0.9, direction=-1)
  #colour <- scico(length(breaks)-1, palette="oslo", begin=0.1, end=0.7, direction=-1) #color for bathymetry
  # jet.color <-  viridis_pal()
  # colour <-  jet.color(length(breaks)-1)
  #colour <- rainbow(n = length(breaks)-1)
  
  richesse <-  cut(Data_PA , breaks=breaks,include.lowest=include.lowest)
  vect_col <- colour[richesse]
  vect_col[which(is.na( vect_col))] <- "white"
  
  shape::emptyplot(xlim, ylim, asp=1.5)#################
  plot(geometry, col=vect_col, lwd=0.2, extent=extent(c(xlim, ylim)), add=T)######### 
  box(mar=c(0,0,0,0))

  if (coastline == TRUE) {
    plot(coast,add=TRUE,col="gray70",border="gray25",lwd=0.4)
  } # end of if
  northarrow(loc = c(-0.2, 44.3), size = 0.4, cex = 0.6)
  scalebar(d = 100, xy = c(-0.9,43.2), type = "bar",label = c("0","","100 km"), below = "",lwd = 10, divs = 2, col = "black", cex = 0.6, lonlat = T)
  
  axis(side=1,line=0,cex.axis=0.7,lwd=0.35,tcl=-0.25,bg="white",labels=c("-10°","-8°","-6°","-4°","-2°","0°"),
       at=c(-10,-8,-6,-4,-2,0),mgp=c(3,0.25,0))
  axis(side=2,line=0,las=2,cex.axis=0.7,lwd=0.35,tcl=-0.25,bg="white",labels=c("42°","44°","46°","48°","50°"),
       at=c(42,44,46,48,50),mgp=c(3,0.5,0))

  Plot_lengend_bouy(var=breaks,color=colour,zlevels=zlevels,title=main_legend,digit=digit,cex.axis.leg=cex.axis.leg, breaks=breaks)
  
  par(mar=c(1,1,1,1))
  plot(x=1:8,y=1:8,col="white",type="n",axes=FALSE) 
  rect(xleft=rep(2,2),ybottom=c(3.5,5.5),xright=rep(3.5,2),ytop=c(4.5,6.5),col=c("gray70","white"))
  text(x=rep(3.7,2),y=c(4,6),label=c("Land","Depth > 800m"),adj=0,cex=0.8)
} # end of map plot function


Plot_lengend_bouy <- function (var,color,zlevels=10,title,digit=1,cex.axis.leg=0.8, breaks=breaks){
  par(mar =c(6,3,5,1))
  jet.color = colorRampPalette(color)
  col =jet.color(100)
  breaks<- unique(TI_bob_cont[, ti])
  vect=quantile(breaks, probs=seq(0,1,0.1), na.rm=T)
  digit=3
  
  image(matrix(1:100,ncol=1), col=col, axes=FALSE)
  mtext(text= title,side=1,line=-5,at= 0.5,cex=1.3)
  axis(1,at=seq(0,1,length=length(vect)), labels=round(vect,digit),cex.axis=cex.axis.leg,tcl=-0.25,mgp=c(3, 0.5, 0))
  box()
} # end of Plot_lengend_bouy


### Application ###
plot_function <- function(ti="TL_moy", main_legend="Mean trophic level",default_breaks=T, changed_breaks=seq(1,2.5,0.02), col=c("blue", "red3"), names_fig="a)", xlim, ylim){
  
  png(paste0("Metaweb/Results/Carte_trophic_indicators/", main_legend, ".png"), width = 14, height = 19.2, units = "cm", pointsize = 12, res = 500)
  
    if (default_breaks == T){ 
      breaks<- unique(TI_bob_cont[, ti])
      if (length(breaks)==1) { breaks <- c(breaks,breaks+1)}
    }else{ breaks <- changed_breaks}
    
    Map_the_troph_world(Data_PA =TI_bob_cont[, ti], geometry=TI_gps ,col = col,
                        breaks=breaks, include.lowest=TRUE, xlim=xlim,ylim=ylim,zlevels=21,
                        coastline = TRUE, main_legend=main_legend, output=FALSE,names_fig="a)",cex_names_fig=1,
                        digit=0,cex.axis.leg=0.8,cex_point=3.4)
  dev.off()
}


################### Plot all graphs ###################

col=c("blue", "red3")
ti_names <- colnames(TI)[12:53]
titles <- c("Species richness", "Connectance in probability network", "Number of trophic link", "Link max", "Connectance","b coefficient (L~S)", "Proportion of top predator" , "Proportion of basal species",
            "Proportion of intermediate species","Vulnerability", "Vul_sd","Generality" ,"Gen_sd" ,"Mean trophic level" , "Mean length of chains"  ,"Mean omnivory index", "Proportion of planktivores (2.4<TL<3.7)",
            "High Trophic level Indicator (HTI)", "Marine Trophic Level (MTI)","Modularity","Diameter",
            "Mean degree", "Din_min" ,"Din_max","Dout_mean"   ,  "Dout_min" , "Dout_max", "Mean closeness" ,"Closeness_min"  ,    
            "Maximal Closeness","Nb_articulate_point","Transitivity","Mean coreness", "Coreness_min","Coreness_max" ,"Mean path length", "Shortest_path_1",
            "Shortest_path_2", "Shortest_path_3","Shortest_path_4", "Shortest_path_5","Redundancy" )


for( ind in 1:length(ti_names) ){
  ti <- ti_names[ind]
  main_legend <- titles[ind]
  plot_function(ti, main_legend, default_breaks=T, changed_breaks=c(), col, names_fig=NA, xlim, ylim)
}

### stats of TI 
df <- data.frame()
for( ind in 1:length(ti_names) ){
  ti <- ti_names[ind]
  stat <- summary(TI_bob_cont[, ti])
  s <- sd(TI_bob_cont[, ti]) 
  df <- rbind(df, c(stat,s))
}
colnames(df) <-c("Min."  ,  "1st Qu.", "Median" , "Mean",    "3rd Qu.", "Max.",    "sd"); row.names(df) <- ti_names
  write.csv(df, "Metaweb/Results/Stats_IT_BoB.csv")
################################################################################################################################################################
  ################### Fig1-B ###################
  Map_the_troph_world <- function (Data_PA =TI_bob_cont, geometry = TI_gps ,col = c("blue", "red3"),
                                   breaks= seq(0,40,2),include.lowest=TRUE, xlim = c(-180,180), ylim = c(-90,90),zlevels=21,
                                   coastline = TRUE, main_legend="Mean Trophic level", output=FALSE,names_fig="a)",cex_names_fig=1,
                                   digit=1,cex.axis.leg=0.8,cex_point=0.6,...){
    require(shape)
    layout(rbind(c(1,1,1,1,1,1,1,1,1,1),c(1,1,1,1,1,1,1,1,1,1),c(1,1,1,1,1,1,1,1,1,1),c(1,1,1,1,1,1,1,1,1,1),c(1,1,1,1,1,1,1,1,1,1),
                 c(1,1,1,1,1,1,1,1,1,1),c(1,1,1,1,1,1,1,1,1,1),c(1,1,1,1,1,1,1,1,1,1),c(1,1,1,1,1,1,1,1,1,1),c(1,1,1,1,1,1,1,1,1,1),
                 c(2,2,2,2,2,2,2,2,3,3)))
    par(mar=c(2, 2, 2,2))
    colour <- scico(length(breaks)-1, palette="romaO", begin=0, end=0.9, direction=-1)
    richesse <-  cut(Data_PA , breaks=breaks,include.lowest=include.lowest)
    vect_col <- colour[richesse]
    vect_col[which(is.na( vect_col))] <- "gray80"
    
    shape::emptyplot(xlim, ylim, asp=1.5)#################
    plot(geometry, col=vect_col, lwd=0.1, extent=extent(c(xlim, ylim)), add=T)######### 
    box(mar=c(0,0,0,0))
    
    if (coastline == TRUE) {
      plot(coast,add=TRUE,col="gray70",border="gray25",lwd=0.4)
    } # end of if
    northarrow(loc = c(-0.1, 44.4), size = 0.6, cex = 0.8, bearing = 0, dist_letter=1.4)
    scalebar(d = 100, xy = c(-0.8,43.2), type = "bar",label = c("0","","100 km"), below = "",lwd = 10, divs = 2, col = "black", cex =0.8, lonlat = T)
    axis(side=1,line=0,cex.axis=1,lwd=0.35,tcl=-0.25,bg="white",labels=c("-10°","-8°","-6°","-4°","-2°","0°"),
         at=c(-10,-8,-6,-4,-2,0),mgp=c(3,0.25,0))
    axis(side=2,line=0,las=2,cex.axis=1,lwd=0.35,tcl=-0.25,bg="white",labels=c("42°","44°","46°","48°","50°"),
         at=c(42,44,46,48,50),mgp=c(3,0.5,0))
    #title(main="", xlab="Longitude", ylab="Latitude",line=1.5, cex.main=1.3)
    
    #Isobath
    marmap :: plot.bathy(isobath, deep=c(-8000,-2000,-200,-100), shallow=c(-2000,-200,-100, -10), step=c(2000,2000,100,100),
                         lwd=c(0.8,0.8,0.8,0.8),lty=c(3,4,2,5),col=c("grey20","grey20","grey20","grey20"),
                         drawlabels=c(T,T,T,T), add=T)
    #
    
    Plot_lengend_bouy(var=breaks,color=colour,zlevels=zlevels,title=main_legend,digit=digit,cex.axis.leg=cex.axis.leg, breaks=breaks)
    par( mar=c(0,0,0,1))
    plot(x=1:8,y=1:8,col="white",type="n",axes=FALSE)
    rect(xleft=rep(0.72,2),ybottom=c(4.4,6.7),xright=rep(2.2,2),ytop=c(5.9,8.2),col=c("gray70","white"))
    text(x=rep(2.9,1.2),y=c(5.15,7.45),label=c("Land","Depth > 800m"),adj=0,cex=1)
  } # end of map plot function
  
  Plot_lengend_bouy <- function (var,color,zlevels=10,title,digit=1,cex.axis.leg=0.8, breaks=breaks){
    par(mar =c(3.2,2,0,1.7))
    jet.color = colorRampPalette(color)
    col =jet.color(100)
    breaks<- unique(TI_bob_cont[, ti])
    vect=quantile(breaks, probs=seq(0,1,0.1), na.rm=T)
      digit=digit
        
    image(matrix(1:100,ncol=1), col=col, axes=FALSE)
    #mtext(text= title,side=1,line=-5,at= 0.5,cex=1.3)  
    axis(1,at=seq(0,1,length=length(vect)), labels=round(vect,digit),cex.axis=cex.axis.leg,tcl=-0.25,mgp=c(3, 0.5, 0), las=1)
    box()
  } # end of Plot_lengend_bouy
  
  ti <- "Species"
  main_legend <- "Species richness"
  breaks<- unique(TI_bob_cont[, ti])
  
  png(paste0("Metaweb/Results/Figures_article/", "Fig1-B", ".png"), width = 15.1, height = 18, units = "cm", pointsize = 12, res = 500)
  Map_the_troph_world(Data_PA =TI_bob_cont[, ti], geometry=TI_gps ,col = col,
                      breaks=breaks, include.lowest=TRUE, xlim=xlim,ylim=ylim,zlevels=21,
                      coastline = TRUE, main_legend=main_legend, output=FALSE,names_fig="a)",cex_names_fig=1,
                      digit=3,cex.axis.leg=1.1,cex_point=3.4)
  dev.off()
  
################### Plot pannel ###################
ti_names <- colnames(TI)[c(29,31, 17)]
titles <- c( "(A) High Trophic level Indicator (HTI)","(B) Modularity", "(C) b coefficient" )

Map_the_troph_world <- function (Data_PA =TI_bob_cont, geometry = TI_gps ,col = c("blue", "red3"),
                                 breaks= seq(0,40,2),include.lowest=TRUE, xlim = c(-180,180), ylim = c(-90,90),zlevels=21,
                                 coastline = TRUE, main_legend="Mean Trophic level", output=FALSE,names_fig="a)",cex_names_fig=1,
                                 digit=1,cex.axis.leg=0.8,cex_point=0.6,...){
  require(shape)
  #layout(rbind(c(1,1,1),c(1,1,1),c(1,1,1),c(2,2,2)))
  par(mar=c(2, 2, 4,2))
  colour <- scico(length(breaks)-1, palette="romaO", begin=0, end=0.9, direction=-1)
  richesse <-  cut(Data_PA , breaks=breaks,include.lowest=include.lowest)
  vect_col <- colour[richesse]
  vect_col[which(is.na( vect_col))] <- "gray80"
  
  shape::emptyplot(xlim, ylim, asp=1.5)#################
  plot(geometry, col=vect_col, lwd=0.2, extent=extent(c(xlim, ylim)), add=T)######### 
  box(mar=c(0,0,0,0))
  
  if (coastline == TRUE) {
    plot(coast,add=TRUE,col="gray70",border="gray25",lwd=0.4)
  } # end of if
  northarrow(loc = c(-0.1, 44.4), size = 0.6, cex = 0.6, bearing = 0, dist_letter=1.9)
  scalebar(d = 100, xy = c(-0.8,43.2), type = "bar",label = c("0","","100 km"), below = "",lwd = 10, divs = 2, col = "black", cex =0.7, lonlat = T)
  axis(side=1,line=0,cex.axis=0.7,lwd=0.35,tcl=-0.25,bg="white",labels=c("-10°","-8°","-6°","-4°","-2°","0°"),
       at=c(-10,-8,-6,-4,-2,0),mgp=c(3,0.25,0))
  axis(side=2,line=0,las=2,cex.axis=0.7,lwd=0.35,tcl=-0.25,bg="white",labels=c("42°","44°","46°","48°","50°"),
       at=c(42,44,46,48,50),mgp=c(3,0.5,0))
  title(main=main_legend, xlab="", ylab="",line=1.5, cex.main=1.3)
  

  Plot_lengend_bouy(var=breaks,color=colour,zlevels=zlevels,title=main_legend,digit=digit,cex.axis.leg=cex.axis.leg, breaks=breaks)
  # par(mar=c(1,1,1,1))
  # plot(x=1:8,y=1:8,col="white",type="n",axes=FALSE) 
  # rect(xleft=rep(2,2),ybottom=c(3.5,5.5),xright=rep(3.5,2),ytop=c(4.5,6.5),col=c("gray25","white"))
  # text(x=rep(3.7,2),y=c(4,6),label=c("Land","No data"),adj=0,cex=0.8)
} # end of map plot function

Plot_lengend_bouy <- function (var,color,zlevels=10,title,digit=1,cex.axis.leg=0.8, breaks=breaks){
  par(mar =c(3,2,0,2))
  jet.color = colorRampPalette(color)
  col =jet.color(100)
  breaks<- unique(TI_bob_cont[, ti])
  vect=quantile(breaks, probs=seq(0,1,0.1), na.rm=T)
  digit=digit
  
  image(matrix(1:100,ncol=1), col=col, axes=FALSE)
  #mtext(text= title,side=1,line=-5,at= 0.5,cex=1.3)
  axis(1,at=seq(0,1,length=length(vect)), labels=round(vect,digit),cex.axis=cex.axis.leg,tcl=-0.25,mgp=c(3, 0.5, 0))
  box()
} # end of Plot_lengend_bouy


png(paste0("Metaweb/Results/Figures_article/", "panel", ".png"), width = 29, height = 12.5, units = "cm", pointsize = 12, res = 500)
#par(mfrow=c(1,3), mar=c(3,0,3,0.5)+0.1, oma=c(0,0,0,0.5), no.readonly = T)
layout(rbind(c(1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5),c(1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5),c(1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5),
             c(1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5),c(1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5),c(1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5),
             c(1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5),c(1,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,5,5,5,5,5,5,5,5),
             c(2,2,2,2,2,2,2,2,4,4,4,4,4,4,4,4,6,6,6,6,6,6,7,7)))

#plot1
ti <- ti_names[1]
main_legend <- titles[1]
breaks<- unique(TI_bob_cont[, ti])

Map_the_troph_world(Data_PA =TI_bob_cont[, ti], geometry=TI_gps ,col = col,
                    breaks=breaks, include.lowest=TRUE, xlim=xlim,ylim=ylim,zlevels=21,
                    coastline = TRUE, main_legend=main_legend, output=FALSE,names_fig="a)",cex_names_fig=1,
                    digit=3,cex.axis.leg=1,cex_point=3.4)

#plot2
ti <- ti_names[2]
main_legend <- titles[2]
breaks<- unique(TI_bob_cont[, ti])
Map_the_troph_world(Data_PA =TI_bob_cont[, ti], geometry=TI_gps ,col = col,
                    breaks=breaks, include.lowest=TRUE, xlim=xlim,ylim=ylim,zlevels=21,
                    coastline = TRUE, main_legend=main_legend, output=FALSE,names_fig="a)",cex_names_fig=1,
                    digit=4,cex.axis.leg=1,cex_point=3.4)

#plot3 

ti <- ti_names[3]
main_legend <- titles[3]
breaks<- unique(TI_bob_cont[, ti])

Map_the_troph_world(Data_PA =TI_bob_cont[, ti], geometry=TI_gps ,col = col,
                    breaks=breaks, include.lowest=TRUE, xlim=xlim,ylim=ylim,zlevels=21,
                    coastline = TRUE, main_legend=main_legend, output=FALSE,names_fig="a)",cex_names_fig=1,
                    digit=3,cex.axis.leg=1,cex_point=3.4)


#Add rectangles
  par( xpd=T, mar=c(0,0,0,1))
  plot(x=1:8,y=1:8,col="white",type="n",axes=FALSE)
  rect(xleft=rep(0.7,2),ybottom=c(4.4,6.7),xright=rep(2.2,2),ytop=c(5.9,8.2),col=c("gray70","white"))
  text(x=rep(2.9,1.2),y=c(5.15,7.45),label=c("Land","Depth > 800m"),adj=0,cex=1)

dev.off() ### End of the pannel




##################################################################################################################################################################################
#try some cases: 
plot_function <- function(ti="TL_moy", main_legend="Mean trophic level",default_breaks=T, changed_breaks=seq(1,2.5,0.02), col=c("blue", "red3"), names_fig="a)", xlim, ylim){
  
  png(paste0("Metaweb/Results/Tests/", main_legend, ".png"), width = 17, height = 19, units = "cm", pointsize = 12, res = 500)

  breaks<- unique(TI_bob_cont[, ti])
  if (length(breaks)==1) { breaks <- c(0,breaks)}

  Map_the_troph_world(Data_PA =TI_cont[, ti], geometry=TI_gps ,col = col,
                      breaks=breaks, include.lowest=TRUE, xlim=xlim,ylim=ylim,zlevels=21,
                      coastline = TRUE, main_legend=main_legend, output=FALSE,names_fig="a)",cex_names_fig=1,
                      digit=0,cex.axis.leg=0.8,cex_point=3.4)
    dev.off()
}
# Check position cases
TI_bob_cont <- TI_bob_cont[which(is.element(TI_bob_cont$sub_code, c("25E55", "20E89", "26E78", "23E67", "25E54","26E77", "20E88", "23E64","23E71", "24E66", "24E76"))), ]
ti <- "Species" ; main_legend <- "Species richness"
TI_gps <- st_transform(TI_bob_cont$geometry, proj84)

plot_function(ti, main_legend, default_breaks=T, changed_breaks=breaks, col, names_fig,xlim, ylim)



##################################################################################################################################################################################
############################################### Plot coreness decomposition ########################################################

Mat_Pa<- readRDS("/home/david_eme/Bureau/Data stage/Intersection range mapping_ICES/Mat_PA2.RDS")
Pp <- Ps <- rep(1,nrow(Mat_Pa))
Mat_Pa <- cbind(Mat_Pa,Producteur_primaire=Pp,Producteur_secondaire=Ps) # Primary and secondary produceres are omnipresent

MW <- readRDS("Metaweb/Results/Mw_herb_distri_corrected_PP_PS_excep.RDS")
P_A_data= Mat_Pa[,-1]
Lniche=MW
i=21946 #cases belle-île
Names <- names(P_A_data[i,which(P_A_data[i,]>0)])
x=Lniche[Names,Names]
bin_net <- round(x,3); bin_net[bin_net<bin_threshold] <- 0 
bin_net[bin_net>=bin_threshold] <- 1
g= graph.adjacency(bin_net,weighted=TRUE)

CorenessLayout <- function(g) {
  coreness <- graph.coreness(g);
  xy <- array(NA, dim=c(length(coreness), 2));
  
  shells <- sort(unique(coreness));
  for(shell in shells) {
    v <- 1 - ((shell-1) / max(shells));
    nodes_in_shell <- sum(coreness==shell);
    angles <- seq(0,360,(360/nodes_in_shell));
    angles <- angles[-length(angles)]; # remove last element
    xy[coreness==shell, 1] <- sin(angles) * v;
    xy[coreness==shell, 2] <- cos(angles) * v;
  }
  return(xy);
}

# g is the network
# compute coreness
coreness <- graph.coreness(g);
# assign colors
colbar <- rainbow(max(coreness));
# create layout
ll <- CorenessLayout(g);
# plot
png(paste0("Metaweb/Results/Tests/",  "Coreness.png"), width = 17, height = 19, units = "cm", pointsize = 12, res = 500)
plot(g, layout=ll, vertex.size=15, vertex.color=colbar[coreness], vertex.frame.color=colbar[coreness], main='Coreness')
dev.off()

########################################################################################################################################################################################
